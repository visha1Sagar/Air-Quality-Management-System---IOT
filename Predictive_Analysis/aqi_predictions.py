# -*- coding: utf-8 -*-
"""AQI_Predictions.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xexHsz-hNdtdaC8XQi6u6ayu8CPbZiTQ
"""

import pandas as pd
from sklearn.ensemble import GradientBoostingClassifier
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
import joblib
import matplotlib.pyplot as plt
import seaborn as sns

#Load and prepare the dataset
data = pd.read_csv("GlobalWeatherRepository.csv")  # Replace with your dataset path

# Keep relevant columns and drop missing values
data = data[['humidity', 'temperature_celsius', 'air_quality_Carbon_Monoxide', 'air_quality_us-epa-index']]
data.dropna(inplace=True)

# Split the dataset
train_df, test_df = train_test_split(data, test_size=0.20, random_state=42)
X_train, y_train = train_df.drop(columns=['air_quality_us-epa-index']), train_df['air_quality_us-epa-index']
X_test, y_test = test_df.drop(columns=['air_quality_us-epa-index']), test_df['air_quality_us-epa-index']

# Train the model
model = GradientBoostingClassifier(n_estimators=300, learning_rate=0.1, random_state=42)
model.fit(X_train, y_train)

# Evaluate the model
y_pred = model.predict(X_test)
print(classification_report(y_test, y_pred))

# Save the trained model
joblib.dump(model, "aqi_model.pkl")
print("Model saved as 'aqi_model.pkl'")

# Step 4: Load the custom dataset
custom_data = pd.read_csv("merged_file_processed.csv")
features = custom_data[['humidity', 'temperature_celsius', 'air_quality_Carbon_Monoxide']]

# Load the saved model
loaded_model = joblib.load("aqi_model.pkl")

# Predict AQI values
predictions = loaded_model.predict(features)
custom_data['predicted_air_quality_us-epa-index'] = predictions
custom_data.to_csv("custom_data_sorted_by_time.csv", index=False)

# Load the dataset
custom_data = pd.read_csv("custom_data_sorted_by_time.csv")


# Set up the plotting style
sns.set(style="whitegrid")

# (a) Distribution of Predicted AQI Categories
plt.figure(figsize=(10, 6))
sns.countplot(data=custom_data, x='predicted_air_quality_us-epa-index', palette='viridis')
plt.title('Distribution of Predicted AQI Categories', fontsize=16)
plt.xlabel('Predicted AQI Category', fontsize=14)
plt.ylabel('Count', fontsize=14)
plt.show()

# (b) Scatter Plot of Predictions Against Humidity
plt.figure(figsize=(10, 6))
plt.scatter(custom_data['humidity'], custom_data['predicted_air_quality_us-epa-index'], alpha=0.5,
            c=custom_data['predicted_air_quality_us-epa-index'], cmap='viridis')
plt.colorbar(label='Predicted AQI Category')
plt.title('Predicted AQI vs Humidity', fontsize=16)
plt.xlabel('Humidity (%)', fontsize=14)
plt.ylabel('Predicted AQI Category', fontsize=14)
plt.show()

# (c) Box Plot of AQI Predictions Against Temperature
plt.figure(figsize=(10, 6))
sns.boxplot(data=custom_data, x='predicted_air_quality_us-epa-index', y='temperature_celsius', palette='Set2')
plt.title('Predicted AQI vs Temperature', fontsize=16)
plt.xlabel('Predicted AQI Category', fontsize=14)
plt.ylabel('Temperature (Celsius)', fontsize=14)
plt.show()

# Convert EventProcessedUtcTime to datetime format
custom_data['EventProcessedUtcTime'] = pd.to_datetime(custom_data['EventProcessedUtcTime'])

# Create a new column for date
custom_data['Date'] = custom_data['EventProcessedUtcTime'].dt.date

# Group data by Date and calculate the average AQI
daily_avg_aqi = custom_data.groupby('Date')['predicted_air_quality_us-epa-index'].mean().reset_index()

# Plot the averaged AQI values
plt.figure(figsize=(10, 6))
plt.plot(daily_avg_aqi['Date'], daily_avg_aqi['predicted_air_quality_us-epa-index'], marker='o', linestyle='-', color='blue')
plt.title('Daily Averaged AQI Values', fontsize=16)
plt.xlabel('Date', fontsize=14)
plt.ylabel('Average AQI Value', fontsize=14)
plt.xticks(rotation=45)
plt.grid(alpha=0.3)
plt.tight_layout()
plt.show()